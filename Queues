//lecture 42 queues 

package   Queues;
class MyQueue{
  final int size = 10;
  int arr[] = new int [size];
  int front = -1;
  int rear = -1;
  boolean isEmpty()
  {
    return (front ==-1&&rear==-1);
  }
  int peek()
  {
    if(this.isEmpty())
    {
      System.out.println("empty queue !! nothing at front");
    }
    return arr[front];
  }
  void enqueue(int data)
  {
    if(this.isEmpty())
    {
      front++;
    }
    if(rear = size -1)
    {
      System.out.println("queue is full !! nothing cannot enqueue");
    }
    // rear = rear+1;
    // arr [rear] = data;
    arr[++rear] = data;

  }
  int dequeue{
    if(this.isEmpty())
    {
      System.out.println("empty queue !! nothing at front");
    }
  if(front == rear)//deleting the only one element int the queue
  {
    int x = arr[front];
    front= -1;
    rear = -1;
    return x;
  }
    return arr[front++];
  }
}
public class ArrayImp{
  public static void main(String args[])
{
  MyQueue Q = new MyQueue();
  System.out.println(q.isEmpty());
  System.out.println( q.peek());
  System.out.println( q.dequeue());
  q.enqueue(7);
  System.out.println(q.isEmpty());
  System.out.println( q.peek());
  System.out.println( q.dequeue());
  q.enqueue(8);
  q.enqueue(9);
  q.enqueue(10);


}
}
class CircularQueue{
  final int size = 10;
  int arr[] = new int [size];
  int front = -1;
  int rear = -1;
  boolean isEmpty()
  {
    return (front ==-1&&rear==-1);//remain same
  }
  int peek()//remains same
  {
    if(this.isEmpty())
    {
      System.out.println("empty queue !! nothing at front");
    }
    return arr[front];
  }
  void enqueue(int data)
  {
    if(this.isEmpty())//when queue is empty
    {
      front++;
    }
    if(rear = (rear +1)%size)//when queue full condition changed
    {
      System.out.println("queue is full !! nothing cannot enqueue");
    }
     rear = rear+1;
     arr [rear] = data;
    

  }
  int dequeue{
    if(this.isEmpty())
    {
      System.out.println("empty queue !! nothing at front");
      return -1;
    }
  if(front == rear)//deleting the only one element int the queue
  {
    int x = arr[front];
    front= -1;
    rear = -1;
    return x;
  }
  int x = arr[front];
  front = (front +1)%size;
  return x;
  }
}


public class CircularQueue{

  public static void main(String args[])
  {
    CircularQueue q = new CircularQueue();
    q.enqueue(1);
    q.enqueue(2);
    q.enqueue(3);
    q.enqueue(4);
    q.enqueue(5);
    q.enqueue(6);
    q.enqueue(7);
    q.enqueue(8);
    q.enqueue(9);
    q.enqueue(10);
    System.out.println(q.dequeue());
    System.out.println(q.dequeue());
    System.out.println(q.dequeu());
    q.enqueue(11);
    q.enqueue(12);
    q.enqueue(13);

  }
}
